{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { handleRef } from './utils';\nexport var RefFindNode = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(RefFindNode, _React$Component);\n\n  function RefFindNode() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.prevNode = null;\n    return _this;\n  }\n\n  var _proto = RefFindNode.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.prevNode = ReactDOM.findDOMNode(this);\n    handleRef(this.props.innerRef, this.prevNode);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var currentNode = ReactDOM.findDOMNode(this);\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n    delete this.prevNode;\n  };\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    return children;\n  };\n\n  return RefFindNode;\n}(React.Component);","map":{"version":3,"sources":["RefFindNode.tsx"],"names":["RefFindNode","React","componentDidMount","ReactDOM","handleRef","componentDidUpdate","currentNode","prevProps","componentWillUnmount","render","children"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,QAAA,MAAA,WAAA;AAEA,SAAA,SAAA,QAAA,SAAA;AAEA,OAAA,IAAaA,WAAb,GAAA,aAAA,UAAA,gBAAA,EAAA;AAAA,EAAA,cAAA,CAAA,WAAA,EAAA,gBAAA,CAAA;;AAAA,WAAA,WAAA,GAAA;AAAA,QAAA,KAAA;;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAA,MAAA,IAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA;AAAA;;AAAA,IAAA,KAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAA,CAAA,KAAA,IAAA;AAAA,IAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AAAA,WAAA,KAAA;AAAA;;AAAA,MAAA,MAAA,GAAA,WAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAAA,iBAAA,GAGEE,SAAAA,iBAAAA,GAAoB;AAClB,SAAA,QAAA,GAAgBC,QAAQ,CAARA,WAAAA,CAAhB,IAAgBA,CAAhB;AAEAC,IAAAA,SAAS,CAAC,KAAA,KAAA,CAAD,QAAA,EAAsB,KAA/BA,QAAS,CAATA;AANJ,GAAA;;AAAA,EAAA,MAAA,CAAA,kBAAA,GASEC,SAAAA,kBAAAA,CAAAA,SAAAA,EAAwC;AACtC,QAAMC,WAAW,GAAGH,QAAQ,CAARA,WAAAA,CAApB,IAAoBA,CAApB;;AAEA,QAAI,KAAA,QAAA,KAAJ,WAAA,EAAmC;AACjC,WAAA,QAAA,GAAA,WAAA;AACAC,MAAAA,SAAS,CAAC,KAAA,KAAA,CAAD,QAAA,EAATA,WAAS,CAATA;AACD;;AAED,QAAIG,SAAS,CAATA,QAAAA,KAAuB,KAAA,KAAA,CAA3B,QAAA,EAAgD;AAC9CH,MAAAA,SAAS,CAAC,KAAA,KAAA,CAAD,QAAA,EAATA,WAAS,CAATA;AACD;AAnBL,GAAA;;AAAA,EAAA,MAAA,CAAA,oBAAA,GAsBEI,SAAAA,oBAAAA,GAAuB;AACrBJ,IAAAA,SAAS,CAAC,KAAA,KAAA,CAAD,QAAA,EAATA,IAAS,CAATA;AAEA,WAAO,KAAP,QAAA;AAzBJ,GAAA;;AAAA,EAAA,MAAA,CAAA,MAAA,GA4BEK,SAAAA,MAAAA,GAAS;AAAA,QACCC,QADD,GACc,KADd,KACc,CADd,QAAA;AAGP,WAAA,QAAA;AA/BJ,GAAA;;AAAA,SAAA,WAAA;AAAA,CAAA,CAAiCT,KAAK,CAAtC,SAAA,CAAA","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { handleRef, RefProps } from './utils';\n\nexport class RefFindNode extends React.Component<RefProps> {\n  prevNode: Node | null = null;\n\n  componentDidMount() {\n    this.prevNode = ReactDOM.findDOMNode(this);\n\n    handleRef(this.props.innerRef, this.prevNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    const currentNode = ReactDOM.findDOMNode(this);\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}